#!/bin/bash
# Function to log messages
log() {
  echo "$(date +"%Y-%m-%d %H:%M:%S") $1"
}
# Function to patch a container within a Kubernetes pod
patch_container() {
  local namespace="$1"
  local pod_name="$2"
  local container_name="$3"
  local attribute="image"
  local new_image="$4"
  
  # Patch the container with the new image
  kubectl patch pod "${pod_name}" -n "${namespace}" --type='json' -p="[{'op': 'replace', 'path': '/spec/containers/?(@.name==\"$container_name\")/$attribute', 'value': '$new_image'}]"
}
# Main script
# Set the namespace and pod name
NAMESPACE="default"
POD_NAME="test-pod"
# Check if kubectl is installed
if ! command kubectl -v &> /dev/null; then
  log "Error: kubectl is not installed. Please install kubectl and try again."
  exit 1
fi
# Check if the pod exists
if ! kubectl get pod "${POD_NAME}" -n "${NAMESPACE}" &> /dev/null; then
  log "Error: Pod ${POD_NAME} not found in namespace ${NAMESPACE}."
  exit 1
fi
# Array of containers to patch
containers=("container-1")
# Prompt user for the new Docker image to pull
new_image=(read -p "Enter the ${URL} with Docker image to pull")

# Loop through containers and patch them with the new image
for container in "${containers[@]}"; do
  log "Pulling new image ${new_image[*]} for container ${container} in pod ${POD_NAME}"
  # Execute patching function
  kubectl patch pod "${POD_NAME}" --patch-file /documents/dissertation/pods/patch.yaml
  
  patch_container "${NAMESPACE}" "${POD_NAME}" "${container}" "${new_image[*]}"
done  
log "Container patching complete for pod ${POD_NAME} in namespace ${NAMESPACE} with the new image ${new_image[*]}."




















